# support tmux installed in home directory
TMUX_COMMAND=~/opt/tmux/bin/tmux
if [ ! -f ${TMUX_COMMAND} ]; then
    TMUX_COMMAND=tmux
fi

# autostart tmux
if [ "$TMUX" = "" ]; then
    if [ "$(hostname)" = "arraia" -o "$(hostname)" = "rabo-de-arraia" ]; then
        if ${TMUX_COMMAND} has-session 2>/dev/null; then
            exec ${TMUX_COMMAND} attach
        else
            exec ${TMUX_COMMAND} new
        fi
    fi
fi

# enable vi mode
bindkey -v
# enable color names instead of codes
autoload -U colors
colors
# enable programmable file renaming
autoload -U zmv

#
# prompt helper functions
#
function git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1 /'
}
function git_no_mail_warning {
  git status 1>/dev/null 2>/dev/null
  if [ $? -ne 128 -a $? -ne 127 -a "$(git config user.email)" = "" -a "$EMAIL" = "" ]; then
    echo -n '(user.email not configured) '
  fi
}
function my_ip {
  hostname --all-ip-addresses
}
function virtual_env {
  if [ "$VIRTUAL_ENV" = "" ]; then
      echo ""
  else
      echo "($(basename $VIRTUAL_ENV)) "
  fi
}

#
# set up the prompt
#
function insert-mode { echo "-- INSERT --" }
function normal-mode { echo "-- NORMAL --" }
function preexec     { print -rn -- $terminfo[el]; }
function set-prompt  {
    PS1=""
    PS1=$PS1"%{$terminfo[cud1]$terminfo[cuu1]$terminfo[sc]$terminfo[cud1]$1$terminfo[rc]%}"
    PS1=$PS1"%~ $ "
}
# just print the first two lines to avoid the problem with multi-line and reset-prompt
function make-first-line {
    FIRST_LINE="\n"
    FIRST_LINE=$FIRST_LINE"[%D{%a, %d %b %Y, %H:%M:%S}] "
    FIRST_LINE=$FIRST_LINE"%{$fg[blue]%}$(virtual_env)%{$reset_color%}"
    FIRST_LINE=$FIRST_LINE"%n "
    FIRST_LINE=$FIRST_LINE"%{$fg[blue]%}%m%{$reset_color%} "
    FIRST_LINE=$FIRST_LINE"$(my_ip) "
    FIRST_LINE=$FIRST_LINE"$(git_super_status) "
    FIRST_LINE=$FIRST_LINE"%{$fg[red]%}$(git_no_mail_warning)%{$reset_color%}"

    print -P "$FIRST_LINE"
}
function precmd {
    make-first-line
    # initial prompt and fix for problem with Ctrl+C and Enter
    set-prompt "$(insert-mode)"
}
function zle-line-init zle-keymap-select {
    # for cursor shapes, see http://stackoverflow.com/questions/4416909/anyway-change-the-cursor-vertical-line-instead-of-a-box
    if [ "${KEYMAP}" = "vicmd" ]; then
        echo -e -n "\x1b[\x31 q" # changes to blinking block
        set-prompt "$(normal-mode)"
    else
        echo -e -n "\x1b[\x35 q" # changes to blinking bar
        set-prompt "$(insert-mode)"
    fi
    zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select

#
# Setup completions
#
# enable more completions
fpath=(~/.zsh/completions.d $fpath)
autoload -U +X compinit && compinit
autoload -U +X bashcompinit && bashcompinit
for file in ~/.zsh/bash_completions.d/*; do
    source "${file}"
done
# complete in both directions
setopt COMPLETE_IN_WORD
# enable # ~ ^ in globs
setopt EXTENDED_GLOB
setopt GLOBDOTS
# general options
zstyle ':completion:*' insert-tab pending # pasting with tabs doesn't perform completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # complete case insensitive
zstyle ':completion:*' menu select # highlight current selection and make suggestions navigable

#
# Various Completions
#
zstyle ':completion:*:kill:*' command 'ps f -u $USER -o pid,%cpu,%mem,cmd'
zstyle ':completion:*:kill:*' force-list always
zstyle ':completion:*:kill:*' menu yes select
zstyle ':completion:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*:processes' sort false
# make sure we do not get the same suggestion twice
zstyle ':completion:*:diff:*' ignore-line yes
zstyle ':completion:*:kill:*' ignore-line yes
zstyle ':completion:*:rm:*' ignore-line yes
# ignore some files during completion
# see http://www.bash2zsh.com/zsh_refcard/refcard.pdf
zstyle ':completion:*:*:*:*:*files' ignored-patterns '*.pyc'

#
# Setup history
#
HISTSIZE=1000000
SAVEHIST=1000000
HISTFILE=~/.zsh_history
setopt EXTENDED_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_REDUCE_BLANKS
setopt INC_APPEND_HISTORY

#
# Make basic keys/shortcuts work
#
# make backspace work after returning from command mode
bindkey -M viins '^?' backward-delete-char
# make del key work over ssh
bindkey -M viins '^[[3~' delete-char
# make Ctrl+Arrow work
bindkey -M vicmd '^[[1;5C' forward-word
bindkey -M viins '^[[1;5C' forward-word
bindkey -M vicmd '^[[1;5D' backward-word
bindkey -M viins '^[[1;5D' backward-word
# make home key work
bindkey -M vicmd '^[[H' beginning-of-line
bindkey -M viins '^[[H' beginning-of-line
# make home key work over ssh
bindkey -M vicmd '^[[1~' beginning-of-line
bindkey -M viins '^[[1~' beginning-of-line
# make end key work
bindkey -M vicmd '^[[F' end-of-line
bindkey -M viins '^[[F' end-of-line
# make end key work over ssh
bindkey -M vicmd '^[[4~' end-of-line
bindkey -M viins '^[[4~' end-of-line
# Fix Shift/Ctrl Enter
bindkey -M vicmd '^[[27;2;13~' accept-line
bindkey -M viins '^[[27;2;13~' accept-line
bindkey -M vicmd '^[[27;5;13~' accept-line
bindkey -M viins '^[[27;5;13~' accept-line
bindkey -M vicmd '^[[27;6;13~' accept-line
bindkey -M viins '^[[27;6;13~' accept-line

#
# Mode-specific Keybindings
#
# undo/redo with u/U
bindkey -M vicmd 'u' undo
bindkey -M vicmd 'U' redo
# complete in word
bindkey -M viins '^P' expand-or-complete-prefix
# allow going back in selection menu using Shift-Tab
bindkey -M viins '^[[Z' reverse-menu-complete

#
# Keybinding requirements
#
autoload -z edit-command-line
zle -N edit-command-line
autoload up-line-or-beginning-search
zle -N up-line-or-beginning-search
autoload down-line-or-beginning-search
zle -N down-line-or-beginning-search

#
# Other Keybindings
#
# vim type incremental search
bindkey -M vicmd '^R' history-incremental-search-backward
bindkey -M viins '^R' history-incremental-search-backward
# undo last completion/change with Ctrl+Z and u
bindkey -M vicmd '^Z' undo
bindkey -M viins '^Z' undo
# clear prompt, but return after next command
bindkey -M vicmd '^X' push-line
bindkey -M viins '^X' push-line
# edit current line in editor
bindkey -M vicmd "^E" edit-command-line
bindkey -M viins "^E" edit-command-line
# proper up down navigation
bindkey "^[[A" up-line-or-beginning-search
bindkey "^[[B" down-line-or-beginning-search

#
# Various settings
#
export KEYTIMEOUT=1
# enable using comments in command line
setopt INTERACTIVE_COMMENTS
# propose action if command was not found
source /etc/zsh_command_not_found
# no need for cd
setopt AUTO_CD
# automatically push directories to the stack, show stack with dirs -v, change to one using ~index
setopt AUTO_PUSHD
# disable Ctrl-S and Ctrl-Q
setopt NO_FLOW_CONTROL

#
# External files
#

# load settings that are local to a specific machine
if [ -f ~/.zsh_local ]; then
    . ~/.zsh_local
fi

#
# Exports
#
export EDITOR=vim
export LS_COLORS='di=34:ln=33:or=31:ex=32'
export MANPAGER="/bin/sh -c \"col -b | vim -c 'set filetype=man tabstop=8 nomodified nomodifiable nolist nonumber' -\""
export PAGER='less -K'
export PATH=$HOME/.bin:$HOME/.rvm/bin:$HOME/opt/virtualenv/bin:$PATH
export PIP_DOWNLOAD_CACHE=~/.pip_download_cache
export VIRTUAL_ENV_DISABLE_PROMPT=True

# use virtualenvwrapper if available
# needs to be after PATH expansion so it uses the Python from ~/opt/virtualenv
if [ -f ~/opt/virtualenv/bin/virtualenvwrapper.sh ]; then
    . ~/opt/virtualenv/bin/virtualenvwrapper.sh
fi

#
# Suffix Aliases
#

# install .deb files including their dependencies
alias -s deb="sudo gdebi"
# run python files
alias -s py="python"
#
alias -s txt="vim"
# use the same association as XFCE
alias -s avi="xdg-open"
alias -s flac="xdg-open"
alias -s gif="xdg-open"
alias -s jpeg="xdg-open"
alias -s jpg="xdg-open"
alias -s mpeg="xdg-open"
alias -s mpg="xdg-open"
alias -s mp3="xdg-open"
alias -s pdf="xdg-open"
alias -s png="xdg-open"
alias -s wmv="xdg-open"

#
# Global Aliases
#
alias -g H="| head"
alias -g T="| tail"
alias -g C="| wc -l"
alias -g L="| less"
alias -g G="| grep"
alias -g S="| sed -e"
alias -g A="| awk"

#
# Other Aliases
#

alias vimpager="/bin/sh -c \"vim -c 'set tabstop=8 nomodified nomodifiable nolist nowrap' -c 'AnsiEsc' -\""
# misc
alias cal='echo -n "       Week "; week;ncal -wC'
alias cd..='cd ..'
alias diff='colordiff'
alias fix_locales='sudo locale-gen en_GB.UTF-8 && sudo dpkg-reconfigure locales'
alias less='less -K'
alias psgrep='ps aufx | grep'
alias psless='ps aufx | vimpager'
alias pss='ps aufx'
alias sbte='./sbt "eclipse with-source=true"'
alias top='top -c'
alias untar='tar -xzf'
alias week='date +%W'
# apt-get
alias autoremove='sudo apt-get autoremove --purge'
alias install='sudo apt-get install'
alias policy='apt-cache policy'
alias uninstall='sudo apt-get purge'
# virtualenvwrapper stuff
alias mkenv='mkvirtualenv'
alias mkenv2='mkvirtualenv --python $(which python2)'
alias mkenv3='mkvirtualenv --python $(which python3)'
alias on='workon'
alias off="deactivate"
# top
alias topcpu='top -b -n1 | tail -n +8 | sort -n -r -k 9'
alias tophead='top -b -n1 | head -n 5'
alias topmem='top -b -n1 | tail -n +8 | sort -n -r -k 10'
# git
GIT_LOG_FORMAT='%C(blue)%h%Creset -%C(yellow)%d%Creset %s %C(blue)(%ai) %C(bold blue)<%an (%ae)>%Creset'
alias ga='git add'
alias gap='ga --patch'
alias gdt='git difftool'
alias gdtc='gdt --cached'
alias gl='git log --graph --decorate --pretty=format:$GIT_LOG_FORMAT --abbrev-commit --date=short --abbrev=8'
alias glh='gl | head'
alias gla='gl --all | vimpager'
alias glah='gl --all | head'
alias gld='gl --left-right --graph --cherry-mark'
alias gldo='gl --left-right --graph'
alias gmd='git merge --ff-only origin/develop'
alias gmm='git merge --ff-only origin/master'

#
# Functions
#
gd()  {git diff --color=always $@          | vimpager}
gdc() {git diff --color=always $@ --cached | vimpager}

# load scm breeze here to be able to extend above aliases
if [ -f ~/.scm_breeze/scm_breeze.sh ]; then
    . ~/.scm_breeze/scm_breeze.sh
fi

if [ -f /home/sebastian/Clones/stderred/build/libstderred.so ]; then
    export LD_PRELOAD="/home/sebastian/Clones/stderred/build/libstderred.so${LD_PRELOAD:+:$LD_PRELOAD}"
fi

#
# Functions
#
function mcd() {
  mkdir $1 && cd $1
}
function ts() {
  date       --iso-8601=seconds --date @$1 2>/dev/null || date --date $1 +%s 2>/dev/null
}
function ts_utc() {
  date --utc --iso-8601=seconds --date @$1 2>/dev/null || date --date $1 +%s 2>/dev/null
}

#
# Plugins
#
for file in ~/.zsh/plugins/**/*.plugin.zsh; do
    source "$file"
done

ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
ZSH_HIGHLIGHT_PATTERNS+=('rm -rf*' 'fg=black,bg=red')
ZSH_HIGHLIGHT_PATTERNS+=('\|' 'fg=yellow')
ZSH_HIGHLIGHT_PATTERNS+=('\*' 'fg=black,bg=red')

#
# Plugin Configuration
#
git_super_status() {
    precmd_update_git_vars
    if [ -n "$__CURRENT_GIT_STATUS" ]; then
        STATUS="$ZSH_THEME_GIT_PROMPT_PREFIX$ZSH_THEME_GIT_PROMPT_BRANCH$GIT_BRANCH%{${reset_color}%}"
        if [ "$GIT_BEHIND" -ne "0" ] && [ "$GIT_AHEAD" -ne "0" ]; then
            STATUS="$STATUS $ZSH_THEME_GIT_PROMPT_BEHIND$GIT_BEHIND\/$ZSH_THEME_GIT_PROMPT_AHEAD$GIT_AHEAD%{${reset_color}%}"
        elif [ "$GIT_BEHIND" -ne "0" ]; then
            STATUS="$STATUS $ZSH_THEME_GIT_PROMPT_BEHIND$GIT_BEHIND%{${reset_color}%}"
        elif [ "$GIT_AHEAD" -ne "0" ]; then
            STATUS="$STATUS $ZSH_THEME_GIT_PROMPT_AHEAD$GIT_AHEAD%{${reset_color}%}"
        fi
        STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_SEPARATOR"
        if [ "$GIT_STAGED" -ne "0" ]; then
            STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_STAGED$GIT_STAGED%{${reset_color}%}"
        fi
        if [ "$GIT_CONFLICTS" -ne "0" ]; then
            STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_CONFLICTS$GIT_CONFLICTS%{${reset_color}%}"
        fi
        if [ "$GIT_CHANGED" -ne "0" ]; then
            STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_CHANGED$GIT_CHANGED%{${reset_color}%}"
        fi
        if [ "$GIT_UNTRACKED" -ne "0" ]; then
            STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_UNTRACKED%{${reset_color}%}"
        fi
        if [ "$GIT_CHANGED" -eq "0" ] && [ "$GIT_CONFLICTS" -eq "0" ] && [ "$GIT_STAGED" -eq "0" ] && [ "$GIT_UNTRACKED" -eq "0" ]; then
            STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_CLEAN"
        fi
        STATUS="$STATUS%{${reset_color}%}$ZSH_THEME_GIT_PROMPT_SUFFIX"
        echo "$STATUS"
    fi
}

ZSH_THEME_GIT_PROMPT_PREFIX="("
ZSH_THEME_GIT_PROMPT_SUFFIX=")"
ZSH_THEME_GIT_PROMPT_SEPARATOR=""

ZSH_THEME_GIT_PROMPT_BEHIND="%{$fg[red]-%G%}"
ZSH_THEME_GIT_PROMPT_AHEAD="%{$fg[red]+%G%}"

ZSH_THEME_GIT_PROMPT_BRANCH="%{$fg_bold[blue]%}"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg_bold[green]%}%{ ✔%G%}"

ZSH_THEME_GIT_PROMPT_STAGED="%{$fg[yellow]%}%{ +%G%}"
ZSH_THEME_GIT_PROMPT_CHANGED="%{$fg[green]%}%{ ~%G%}"
ZSH_THEME_GIT_PROMPT_UNTRACKED="%{$fg[cyan]%}%{ …%G%}"

ZSH_THEME_GIT_PROMPT_CONFLICTS="%{$fg[red]%}%{X%G%}"

export N_PREFIX="$HOME/n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"  # Added by n-install (see http://git.io/n-install-repo).

if [ -f $HOME/.rvm/scripts/rvm ]; then
    . $HOME/.rvm/scripts/rvm
fi
