- name: Play to install ASDF
  hosts: all

  environment:
    ASDF_NODEJS_AUTO_ENABLE_COREPACK: "true"
    PATH: "{{ target_directory }}/.bin:{{ target_directory }}/.asdf/shims:{{ ansible_env.PATH }}"

  vars:

    packages:
      - plugin: nodejs
        version: latest:22
      - plugin: python
        version: latest:3.11
      - plugin: rust
        version: 1.88.0  # renovate: rust-lang/rust
        additional_option: https://github.com/asdf-community/asdf-rust.git

      - plugin: direnv
        version: 2.37.1  # renovate: direnv/direnv
      - plugin: github-cli
        version: 2.76.2  # renovate: cli/cli
      - plugin: iamlive
        version: 1.1.26  # renovate: iann0036/iamlive
      - plugin: pre-commit
        version: 4.2.0  # renovate: pre-commit/pre-commit
      - plugin: terraform
        version: 1.12.2  # renovate: hashicorp/terraform
      - plugin: terraform-docs
        version: 0.18.0  # renovate: terraform-docs/terraform-docs
      - plugin: tflint
        version: 0.51.1  # renovate: terraform-linters/tflint
      - plugin: tfsec
        version: 1.28.4  # renovate: aquasecurity/tfsec
      - plugin: trivy
        version: 0.59.1  # renovate: aquasecurity/trivy


    zsh_completion_directory: "{{ target_directory }}/.config/zsh/completions.d"

  tasks:

    - name: Install ASDF plugins
      shell: |
        asdf plugin add {{ item.plugin }} {{ item.additional_option | default('') }}
      args:
        creates: "{{ target_directory }}/.asdf/plugins/{{ item.plugin }}"
        executable: /bin/bash
      loop: "{{ packages }}"

    - name: Install configured versions with ASDF
      shell: |
        asdf install {{ item.plugin }} {{ item.version }}
      args:
        executable: /bin/bash
      register: installation
      changed_when: not installation.stderr_lines or installation.stderr_lines[-1] is not match(".* is already installed")
      loop: "{{ packages }}"
      loop_control:
        index_var: index

    - name: Get installed version with ASDF
      shell: |
        set -o pipefail
        # another `asdf install` should give: `version x.x.x of <PLUGIN> is already installed` on stderr
        asdf install {{ item.plugin }} {{ item.version }} 2>&1 1>/dev/null | awk '{print $2}'
      args:
        executable: /bin/bash
      register: installed_version
      changed_when: false
      loop: "{{ packages }}"

    - name: Check ~/.tool-versions exists
      ansible.builtin.stat:
        path: ~/.tool-versions
      register: tool_versions_status

    - name: Create ~/.tool-versions
      ansible.builtin.file:
        path: ~/.tool-versions
        state: touch
        mode: 0644
      when: not tool_versions_status.stat.exists

    - name: Check whether installed version is set with ASDF
      lineinfile:
        name: ~/.tool-versions
        line: "{{ item.plugin }} {{ installed_version.results[index].stdout }}"
        state: present
      check_mode: yes
      register: installed_version_set
      loop: "{{ packages }}"
      loop_control:
        index_var: index

    - name: Set installed version with ASDF
      shell: |
        asdf set --home {{ item.plugin }} {{ installed_version.results[index].stdout }}
      args:
        executable: /bin/bash
      when: installed_version_set.results[index].changed  # noqa: no-handler
      changed_when: installed_version_set.results[index].changed
      loop: "{{ packages }}"
      loop_control:
        index_var: index

    # this is created when installing packages, but the nodejs install is brand new
    - name: Create node_modules directory
      file:
        path: "{{ target_directory }}/.asdf/installs/nodejs/{{ installed_version.results[0].stdout }}/.npm/lib/node_modules"
        state: directory
        mode: 0755

    # see https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders
    - name: Create ~/.node_modules link
      file:
        src: "{{ target_directory }}/.asdf/installs/nodejs/{{ installed_version.results[0].stdout }}/.npm/lib/node_modules"
        dest: "{{ target_directory }}/.node_modules"
        state: link

    - name: Ensure directory for ZSH completions
      file:
        path: "{{ zsh_completion_directory }}"
        state: directory
        mode: 0755

    - name: Generate gh zsh completions
      command: gh completion -s zsh
      args:
        creates: "{{ zsh_completion_directory }}/_gh"
      register: generate_gh_completions

    - name: Save gh zsh completions
      copy:
        content: "{{ generate_gh_completions.stdout }}"
        dest: "{{ zsh_completion_directory }}/_gh"
        mode: 0644
        force: false
