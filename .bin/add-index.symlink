#!/usr/bin/env python
# pylint: disable=invalid-name
import argparse
import re
import sys

ANSI_REGEXP = re.compile(
    r'\x1b[^m]+m'
)
LS_REGEXP = re.compile(
    r'(?P<properties>([0-9]+ )?([^ ]+ +){8})'
    r'(?P<filename>.+)'
)

SUPPORTED_INPUT_TYPES = (
    'ls_list',
)


def get_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--input-type',
        required=True,
        choices=SUPPORTED_INPUT_TYPES,
    )
    parser.add_argument(
        '--print-files',
        action='store_true',
    )
    parser.add_argument(
        'infile',
        nargs='?',
        type=argparse.FileType('r'),
        default=sys.stdin,
    )
    parser.add_argument(
        'outfile',
        nargs='?',
        type=argparse.FileType('w'),
        default=sys.stdout,
    )
    return parser.parse_args()


def main():
    arguments = get_arguments()
    infile = arguments.infile
    outfile = arguments.outfile

    files = []
    matches = []
    for line in infile:
        match = LS_REGEXP.match(line)
        if not match:
            outfile.write(line)
        else:
            files.append(match.group('filename').split(' -> ')[0])
            matches.append(match)

    padding = len(str(len(matches))) + 2
    for index, match in enumerate(matches, start=1):
        index_string = ('[%s]' % index).rjust(padding, ' ')
        outfile.write(match.group('properties'))
        outfile.write(index_string + ' ')
        outfile.write(match.group('filename'))
        outfile.write('\n')

    if arguments.print_files:
        outfile.write('@@file_list@@\n')
        for filename in files:
            outfile.write(ANSI_REGEXP.sub('', filename))
            outfile.write('\n')


if __name__ == '__main__':
    main()
