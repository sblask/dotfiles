#!/usr/bin/env python
# pylint: disable=invalid-name
import argparse
import re
import sys

ANSI_REGEXP = re.compile(
    r'\x1b[^m]+m'
)
GIT_STATUS_REGEXP = re.compile(
    r'(?P<line>\t([^:]+: +)?)'
    r'(?P<filename>.+)'
)
LS_REGEXP = re.compile(
    r'(?P<line>([0-9]+ )?([^ ]+ +){8})'
    r'(?P<filename>.+)'
)

SUPPORTED_INPUT_TYPES = (
    'git_status',
    'ls_list',
)


def get_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--input-type',
        required=True,
        choices=SUPPORTED_INPUT_TYPES,
    )
    parser.add_argument(
        '--print-files',
        action='store_true',
    )
    parser.add_argument(
        'infile',
        nargs='?',
        type=argparse.FileType('r'),
        default=sys.stdin,
    )
    parser.add_argument(
        'outfile',
        nargs='?',
        type=argparse.FileType('w'),
        default=sys.stdout,
    )
    return parser.parse_args()


def main():
    arguments = get_arguments()

    if arguments.input_type == 'git_status':
        lines, files = parse_git_status_input(arguments)
    elif arguments.input_type == 'ls_list':
        lines, files = parse_ls_list_input(arguments)

    print_output(arguments, lines, files)
    maybe_print_files(arguments, files)


def parse_git_status_input(arguments):
    lines = []
    files = []

    for line in arguments.infile:
        match = GIT_STATUS_REGEXP.match(line)
        if not match:
            lines.append((line, None))
        else:
            lines.append((match.group('line'), match.group('filename')))
            if 'renamed' in match.group('line'):
                files.append(match.group('filename').split(' -> ')[1])
            else:
                files.append(match.group('filename'))

    return lines, files


def parse_ls_list_input(arguments):
    lines = []
    files = []

    for line in arguments.infile:
        match = LS_REGEXP.match(line)
        if not match:
            lines.append((line, None))
        else:
            lines.append((match.group('line'), match.group('filename')))
            files.append(match.group('filename').split(' -> ')[0])

    return lines, files


def print_output(arguments, lines, files):
    outfile = arguments.outfile

    padding = len(str(len(files))) + 2
    index = 1
    for line, filename in lines:
        if filename is None:
            outfile.write(line)
        else:
            index_string = '[%s]' % index
            fixed_length_index_string = index_string.rjust(padding, ' ') + ' '
            outfile.write(line + fixed_length_index_string + filename + '\n')
            index += 1


def maybe_print_files(arguments, files):
    outfile = arguments.outfile

    if arguments.print_files:
        outfile.write('@@file_list@@\n')
        for filename in files:
            outfile.write(ANSI_REGEXP.sub('', filename))
            outfile.write('\n')


if __name__ == '__main__':
    main()
