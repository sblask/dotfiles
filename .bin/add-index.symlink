#!/usr/bin/env python
# pylint: disable=invalid-name
import argparse
import os.path
import re
import sys

ANSI_REGEXP = re.compile(
    r'(\x1b[^m]+m)|(\x1b\[K)'
)
AG_REGEXP = re.compile(
    r'(?P<prefix>(\x1b[^m]+m))'
    r'(?P<indexable>.+)'
)
FILE_REGEXP = re.compile(
    r'(?P<prefix>(\x1b[^m]+m))'
    r'(?P<indexable>/.+)'
)
GIT_BRANCH_REGEXP = re.compile(
    r'(?P<prefix>[ *]{1} {1}(\x1b[^m]+m)?)'
    r'(?P<indexable>\S.+)'
)
GIT_STATUS_REGEXP = re.compile(
    r'(?P<prefix>\t(\x1b[^m]+m)?([^:]+: +)?)'
    r'(?P<indexable>.+)'
)
LS_PATH_REGEXP = re.compile(
    r'(?P<directory>.+):'
)
LS_REGEXP = re.compile(
    r'(?P<prefix>([0-9]+ )?([^ ]+ +){8})'
    r'(?P<indexable>.+)'
)

SUPPORTED_INPUT_TYPES = (
    'ag',
    'git_branch',
    'git_status',
    'list',
    'ls_list',
    'mixed',
)

UNDESIRED_BRANCH_PREFIX = 'remotes/origin/'


def get_arguments():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '--input-type',
        required=True,
        choices=SUPPORTED_INPUT_TYPES,
    )
    parser.add_argument(
        '--print-indexables',
        action='store_true',
    )
    parser.add_argument(
        '--relative-paths',
        action='store_true',
    )

    parser.add_argument(
        'infile',
        nargs='?',
        type=argparse.FileType('r'),
        default=sys.stdin,
    )
    parser.add_argument(
        'outfile',
        nargs='?',
        type=argparse.FileType('w'),
        default=sys.stdout,
    )
    return parser.parse_args()


def main():
    arguments = get_arguments()

    if arguments.input_type == 'ag':
        indexables = parse_ag_input(arguments)
        maybe_print_indexables(arguments, indexables)
        return
    elif arguments.input_type == 'git_branch':
        lines, indexables = parse_git_branch_input(arguments)
    elif arguments.input_type == 'git_status':
        lines, indexables = parse_git_status_input(arguments)
    elif arguments.input_type == 'list':
        lines, indexables = parse_list_input(arguments)
    elif arguments.input_type == 'ls_list':
        lines, indexables = parse_ls_list_input(arguments)
    elif arguments.input_type == 'mixed':
        lines, indexables = parse_mixed_input(arguments)

    print_output(arguments, lines, indexables)
    maybe_print_indexables(arguments, indexables)


def parse_ag_input(arguments):
    indexables = []

    index = 1
    for line in arguments.infile:
        clean_line = ANSI_REGEXP.sub('', line).strip()
        if os.path.exists(clean_line):
            match = AG_REGEXP.match(line)
            if match:
                arguments.outfile.write(match.group('prefix'))
                arguments.outfile.write('[%s] ' % index)
                arguments.outfile.write(match.group('indexable'))
                arguments.outfile.write('\n')

            indexables.append(clean_line)
            index += 1
        else:
            arguments.outfile.write(line)

    return indexables


def parse_git_branch_input(arguments):
    lines = []
    indexables = []

    for line in arguments.infile:
        match = GIT_BRANCH_REGEXP.match(line)
        if not match:
            lines.append((line, None))
        else:
            indexable = match.group('indexable')
            lines.append((match.group('prefix'), indexable))

            if indexable.startswith(UNDESIRED_BRANCH_PREFIX):
                indexables.append(indexable[len(UNDESIRED_BRANCH_PREFIX):])
            else:
                indexables.append(indexable)

    return lines, indexables


def parse_git_status_input(arguments):
    lines = []
    indexables = []

    for line in arguments.infile:
        match = GIT_STATUS_REGEXP.match(line)
        if not match:
            lines.append((line, None))
        else:
            indexable = match.group('indexable')
            lines.append((match.group('prefix'), indexable))

            if 'renamed' in match.group('prefix'):
                indexables.append(indexable.split(' -> ')[1])
            else:
                indexables.append(indexable)

    return lines, indexables


def parse_list_input(arguments):
    indexables = [line.strip() for line in arguments.infile]
    lines = [('', indexable) for indexable in indexables]
    return lines, indexables


def parse_ls_list_input(arguments):
    lines = []
    indexables = []
    relative_path = ''

    for line in arguments.infile:
        path_match = LS_PATH_REGEXP.match(line)

        if path_match and os.path.exists(path_match.group('directory')):
            relative_path = path_match.group('directory')

        line_match = LS_REGEXP.match(line)
        if not line_match:
            lines.append((line, None))
        else:
            indexable = line_match.group('indexable')
            lines.append((line_match.group('prefix'), indexable))

            path = indexable.split(' -> ')[0]
            if not arguments.relative_paths:
                path = os.path.abspath(os.path.join(relative_path, path))

            indexables.append(path)

    return lines, indexables


def parse_mixed_input(arguments):
    lines = []
    indexables = []

    for line in arguments.infile:
        match = FILE_REGEXP.match(line)
        if match:
            lines.append((match.group('prefix'), match.group('indexable')))
            indexables.append(match.group('indexable'))
        else:
            lines.append((line, None))

    return lines, indexables


def print_output(arguments, lines, indexables):
    outfile = arguments.outfile

    padding = len(str(len(indexables))) + 2
    index = 1
    for prefix, indexable in lines:
        if indexable is None:
            outfile.write(prefix)
        else:
            index_string = '[%s]' % index
            fixed_length_index_string = index_string.rjust(padding, ' ') + ' '
            outfile.write(prefix + fixed_length_index_string + indexable + '\n')
            index += 1


def maybe_print_indexables(arguments, indexables):
    outfile = arguments.outfile

    if arguments.print_indexables:
        outfile.write('@@indexables@@\n')
        for indexable in indexables:
            outfile.write(ANSI_REGEXP.sub('', indexable))
            outfile.write('\n')


if __name__ == '__main__':
    main()
