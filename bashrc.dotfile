# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000000
HISTFILESIZE=2000000

# write to histoy file after each command execution
PROMPT_COMMAND='history -a'

# keep backups, just in case
mkdir -p ~/.bash_history_archive
cp ~/.bash_history ~/.bash_history_archive/.bash_history.$(date +"%Y-%m-%d_%H-%M-%S")

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

function my_ip {
  IP_LINE=$(ip addr show dev eth0 | grep 'inet ')
  if [ "$IP_LINE" == "" ]; then
    IP_LINE=$(ip addr show dev wlan0 | grep 'inet ')
  fi
  echo $IP_LINE | awk '{split($0,a,"(/| +)"); print a[2]}'
}

function git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1 /'
}

function git_no_mail_warning {
  git status 1>/dev/null 2>/dev/null
  if [ $? -ne 128 -a $? -ne 127 -a "$(git config user.email)" == "" -a "$EMAIL" == "" ]; then
    echo '(user.email not configured) '
  fi
}

# show date, time and git stuff in prompt
function set_prompt {
  local NO_COLOUR="\[\033[00m\]"
  local BLUE="\[\033[0;34m\]"
  local RED="\[\033[0;31m\]"
  PS1="\n"
  PS1=$PS1'\[$(retval=$?;tput cup "$LINES";exit $retval)\]'
  PS1=$PS1"[\$(date '+%a, %d %b %Y, %k:%M:%S')] "
  PS1=$PS1"${BLUE}\${VIRTUAL_ENV:+(\$(basename \$VIRTUAL_ENV)) }${NO_COLOUR}"
  PS1=$PS1"\u "
  PS1=$PS1"${BLUE}\h${NO_COLOUR} "
  PS1=$PS1"\$(my_ip) "
  PS1=$PS1"${BLUE}\$(git_branch)"
  PS1=$PS1"${RED}\$(git_no_mail_warning)"
  PS1=$PS1"\n${NO_COLOUR}\w \$ "
}
set_prompt

# load scm breeze here to allow overwriting aliases
if [ -f ~/.scm_breeze/scm_breeze.sh ]; then
    . ~/.scm_breeze/scm_breeze.sh
fi

if [ -f ~/.aliases ]; then
    . ~/.aliases
fi

# load settings that are local to a specific machine
if [ -f ~/.bash_local ]; then
    . ~/.bash_local
fi

# use virtualenvwrapper if available
if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
    . /usr/local/bin/virtualenvwrapper.sh
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

if [ -f ~/.bash_completions ]; then
    . ~/.bash_completions
fi

# various exports
export EDITOR=vim
export LS_COLORS='di=34:ln=33:or=31:ex=32'
export MANPAGER="/bin/sh -c \"col -b | vim -c 'set filetype=man tabstop=8 nomodified nomodifiable nolist nonumber' -\""
export PAGER='less -K'
export PATH=~/.bin:$PATH
export PIP_DOWNLOAD_CACHE=~/.pip_download_cache
export VIRTUAL_ENV_DISABLE_PROMPT=True

