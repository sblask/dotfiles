# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000000
HISTFILESIZE=2000000

# write to histoy file after each command execution
PROMPT_COMMAND='history -a'

# keep backups, just in case
mkdir -p ~/.bash_history_archive
cp ~/.bash_history ~/.bash_history_archive/.bash_history.$(date +"%Y-%m-%d_%H-%M-%S")

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

function my_ip {
  IP_LINE=$(ip addr show dev eth0 | grep 'inet ')
  if [ "$IP_LINE" == "" ]; then
    IP_LINE=$(ip addr show dev wlan0 | grep 'inet ')
  fi
  echo $IP_LINE | awk '{split($0,a,"(/| +)"); print a[2]}'
}

function git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1 /'
}

function git_no_mail_warning {
  git status 1>/dev/null 2>/dev/null
  if [ $? -ne 128 -a $? -ne 127 -a "$(git config user.email)" == "" -a "$EMAIL" == "" ]; then
    echo '(user.email not configured) '
  fi
}

# show date, time and git stuff in prompt
function set_prompt {
  local NO_COLOUR="\[\033[00m\]"
  local BLUE="\[\033[0;34m\]"
  local RED="\[\033[0;31m\]"
  PS1="[\$(date '+%a, %d %b %Y, %k:%M:%S')] ${debian_chroot:+($debian_chroot)}\u ${BLUE}\h${NO_COLOUR} \$(my_ip) ${BLUE}\$(git_branch)${RED}\$(git_no_mail_warning)${NO_COLOUR}\w \$ "
}
set_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# load scm breeze here to allow overwriting aliases
if [ -f ~/.scm_breeze/scm_breeze.sh ]; then
    . ~/.scm_breeze/scm_breeze.sh
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# load settings that are local to a specific machine
if [ -f ~/.bash_local ]; then
    . ~/.bash_local
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

if [ -f ~/.bash_completions ]; then
    . ~/.bash_completions
fi

# various exports
export EDITOR=vim
export PAGER='less -K'
export PATH=~/.bin:$PATH
export PIP_DOWNLOAD_CACHE=~/.pip_download_cache

# more colors if available
if [ -e /lib/terminfo/x/xterm-256color ]; then
  export TERM='xterm-256color'
else
  export TERM='xterm-color'
fi

# vi mode instead of emacs mode
set -o vi

# ctrl-left and ctrl-right seem to get lost when switching to vi mode
bind '"\e[1;5D": backward-word'
bind '"\e[1;5C": forward-word'

# home and end key didn't work with ssh in tmux
bind '"\e[1~": beginning-of-line'
bind '"\e[4~": end-of-line'

