set nocompatible

set backup
if exists('*mkdir') && !isdirectory(expand("~/.vim/backup"))
    call mkdir(expand("~/.vim/backup"))
endif
set backupdir=~/.vim/backup//

if exists('*mkdir') && !isdirectory(expand("~/.vim/swap"))
    call mkdir(expand("~/.vim/swap"))
endif
set directory=~/.vim/swap//

" some stuff requires this to be set, so do it as early as possible
set term=xterm-256color

"
" plugin related settings
"

" Vundle stuff
filetype off
if isdirectory(expand("~/.vim/bundle/vundle/"))
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()
    Bundle 'SirVer/ultisnips'
    Bundle 'bkad/CamelCaseMotion'
    Bundle 'chriskempson/base16-vim'
    Bundle 'craigemery/vim-autotag'
    Bundle 'davidhalter/jedi-vim'
    Bundle 'editorconfig/editorconfig-vim'
    Bundle 'ervandew/supertab'
    Bundle 'fisadev/vim-isort'
    Bundle 'gmarik/vundle'
    Bundle 'honza/vim-snippets'
    Bundle 'isRuslan/vim-es6'
    Bundle 'jelera/vim-javascript-syntax'
    Bundle 'junegunn/vim-easy-align'
    Bundle 'kien/ctrlp.vim'
    Bundle 'lokaltog/vim-easymotion'
    Bundle 'mileszs/ack.vim'
    Bundle 'mitsuhiko/vim-jinja'
    Bundle 'qmx/vim-json'
    Bundle 'scrooloose/nerdtree'
    Bundle 'scrooloose/syntastic'
    Bundle 'sheerun/vim-polyglot'
    Bundle 'terryma/vim-multiple-cursors'
    Bundle 'tmux-plugins/vim-tmux'
    Bundle 'tpope/vim-commentary'
    Bundle 'tpope/vim-fugitive'
    Bundle 'tpope/vim-surround'
    Bundle 'tpope/vim-unimpaired'
    Bundle 'vim-airline/vim-airline'
    Bundle 'vim-airline/vim-airline-themes'
    Bundle 'vim-scripts/AnsiEsc.vim'
    Bundle 'vim-scripts/CmdlineComplete'
    Bundle 'vim-scripts/VimClojure'
    Bundle 'vim-scripts/argtextobj.vim'
    Bundle 'wesQ3/vim-windowswap'
endif
filetype plugin indent on

" have tree view enabled be default (:Vexplore)
let g:netrw_liststyle=3
" open document to the right of the browser
let g:netrw_browse_split=4

if isdirectory(expand("~/.vim/bundle/vim-airline/"))
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#tabline#buffer_min_count = 2
    let g:airline#extensions#tabline#show_buffers = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#whitespace#enabled = 0
    let g:airline_powerline_fonts = 1
    let g:airline_section_c = airline#section#create_left(['%{getcwd()}', '%f'])
    let g:airline_theme = 'luna'
endif

let g:ackprg = 'ag --nogroup --nocolor --column'

let g:autotagTagsFile = '.tags'

let g:ctrlp_extensions = []
let g:ctrlp_user_command ='ag %s -l --hidden --ignore .git --nocolor -g ""'
let g:ctrlp_use_caching = 0

let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = 0
let g:jedi#use_tabs_not_buffers = 0

let g:polyglot_disabled = ['jinja', 'tmux']

let g:SuperTabDefaultCompletionType = "context"

let g:syntastic_aggregate_errors = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_echo_current_error = 1
let g:syntastic_enable_signs = 1
let g:syntastic_error_symbol = '✗'
let g:syntastic_javascript_checkers = ['eslint', 'jscs']
let g:syntastic_scss_checkers = ['scss_lint']
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '✗'
let g:syntastic_warning_symbol = '✗'

let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<esc>[Z"
let g:UltiSnipsListSnippets="<F1>"
let g:UltiSnipsEditSplit="vertical"

" open or create a file
"

fun! ConfigurePythonCheckers()
    let flake8Config = findfile('setup.cfg', '.;')
    if flake8Config != ''
        let g:syntastic_python_checkers = ['pylint', 'flake8']
        let g:syntastic_python_flake8_args = '--config ' . flake8Config
    else
        let g:syntastic_python_checkers = ['pylint', 'pycodestyle']
        let g:syntastic_python_pycodestyle_args = '--ignore E501'
    endif

    let pylintConfig = findfile('.pylintrc', '.;')
    if pylintConfig != ''
        let g:syntastic_python_pylint_args = '--rcfile ' . pylintConfig
    endif
endf

fun! SetScssConfig()
    let scssConfig = findfile('.scss-lint.yml', '.;')
    if scssConfig != ''
        let b:syntastic_scss_scss_lint_args = '--config ' . scssConfig
    endif
endf

fun! SetJavascriptCheckers()
    let localEslint = findfile('node_modules/.bin/eslint', '.;')
    if localEslint != ""
        let b:syntastic_javascript_eslint_exec = fnamemodify(localEslint, ':p')
    endif

    let localJscs = findfile('node_modules/.bin/jscs', '.;')
    if localJscs != ""
        let b:syntastic_javascript_jscs_exec = fnamemodify(localJscs, ':p')
    endif
endf
"
" Add the virtualenv's site-packages to vim path
if has('python')
py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF
endif

" autocommands
if !exists("autocommands_loaded")
    let autocommands_loaded = 1
    " reload .vimrc automatically
    autocmd BufWritePost  .vimrc            source %
    autocmd BufWritePost  vimrc.dotfile     source %
    " automatic skeleton for new code files
    autocmd BufNewFile    setup.py          0r ~/.skeletons/setup.py      | $d
    autocmd BufNewFile    *.html            0r ~/.skeletons/skeleton.html | $d
    autocmd BufNewFile    *.py              0r ~/.skeletons/skeleton.py   | $d
    autocmd BufNewFile    *.sh              0r ~/.skeletons/skeleton.sh   | $d
    " set filetype or syntax explicitely when creating or opening file
    autocmd BufRead       bash*.dotfile     set filetype=sh
    autocmd BufRead       .bash*            set filetype=sh
    autocmd BufNewFile    *.jinja           set syntax=jinja
    autocmd BufRead       *.jinja           set syntax=jinja
    autocmd BufNewFile    *.jsm             set filetype=javascript
    autocmd BufRead       *.jsm             set filetype=javascript
    autocmd BufNewFile    *.scss            set iskeyword+=-
    autocmd BufRead       *.scss            set iskeyword+=-
    autocmd BufNewFile    *.sls             set syntax=yaml | set iskeyword+=- | set iskeyword+=.
    autocmd BufRead       *.sls             set syntax=yaml | set iskeyword+=- | set iskeyword+=.
    autocmd BufRead       tmux.conf.dotfile set ft=tmux | compiler tmux
    " different changes
    autocmd BufWritePost  *                 if &diff | diffupdate | endif
    autocmd FileType      javascript        :call SetJavascriptCheckers()
    autocmd FileType      scss              :call SetScssConfig()
    autocmd FileType      python            :call ConfigurePythonCheckers() | setlocal completeopt-=preview
endif

set encoding=utf-8
" change to directory of current document in browser
" makes less sense in diff mode and leads to errors in older vim versions

"
" ctags
"

" recursively check the current directoy and its parents for .tags file, pick
" the first one found
set tags=./.tags;/

"
" display
"

" always show statusline
set laststatus=2
" show line numbers
set number
" wrap long lines
set wrap
" don't fold
set nofoldenable
set foldminlines=99999
" show tabs and trailing whitespace
:set list listchars=tab:»»,trail:·
" zsh-like command completion
set wildmenu
set wildmode=longest,full
set wildignore=.git,*.pyc

"
" mouse cursor
" 35: bar 33: underline 31: block
"

" make sure we are always start in normal mode
autocmd FocusGained * silent execute '!echo -e -n "\x1b[\x31 q"' | silent execute '!echo ""'
autocmd VimEnter    * silent execute '!echo -e -n "\x1b[\x31 q"' | silent execute '!echo ""'
let &t_SI = "\x1b[\x35 q"
let &t_EI = "\x1b[\x31 q"
let &t_SR = "\x1b[\x33 q"

"
" behaviour
"

" set working directory to the folder containing the current file
if !&diff
    set autochdir
endif
" switch back to normal mode more quickly
set ttimeoutlen=0
" ignore case when completing filenames
set fileignorecase

" indentation
set autoindent
set expandtab
set shiftwidth=4
set softtabstop=4

" splits
set splitbelow
set splitright

" try to keep column when scrolling
set nostartofline

"
" random utils
"

" write as sudo
noremap <Leader>W :w !sudo tee % > /dev/null<CR>
" format json file
noremap <Leader>J :% !format-json<CR>

"
" search
"

" update result as you type
set incsearch
" ignore case
set ignorecase
" highlight search results
set hlsearch

"
" colours
"

syntax on

set t_Co=256 "256 colors

if isdirectory(expand("~/.vim/bundle/base16-vim"))
    colorscheme base16-eighties
else
    colorscheme darkblue
endif
set background=dark

" background of line number column if shown
highlight LineNr ctermbg=bg
" normal text colour
highlight Normal ctermfg=grey
" autocompletion box
highlight Pmenu ctermfg=black ctermbg=grey
" currently selected line in autocompletion box
highlight PmenuSel ctermfg=lightGrey ctermbg=darkGrey
" wild menu highlighting
highlight StatusLine ctermfg=lightGrey ctermbg=bg
highlight WildMenu ctermfg=black ctermbg=lightGrey
" highlight matches
highlight clear Search
highlight Search ctermbg=yellow ctermfg=brown
" highlight while typing
highlight clear IncSearch
highlight IncSearch ctermbg=blue ctermfg=white
" background of column where warnings and errors are shown
highlight SignColumn ctermbg=bg
" colours for warnings and errors
highlight SyntasticErrorSign ctermbg=bg ctermfg=red
highlight SyntasticWarningSign ctermbg=bg ctermfg=darkyellow
highlight SyntasticStyleErrorSign ctermbg=bg ctermfg=yellow
highlight SyntasticStyleWarningSign ctermbg=bg ctermfg=yellow
" selected text in visual mode
highlight Visual cterm=reverse ctermbg=None ctermfg=None
" matching parentheses
highlight MatchParen cterm=bold ctermfg=yellow
" enable highlighting of current line
set cursorline
" don't actually highlight the line...
highlight clear CursorLine
" ...only the line number
highlight CursorLineNR cterm=bold ctermbg=bg ctermfg=yellow
" colors for listchars
highlight SpecialKey ctermfg=darkRed

"
" vimdiff
"
" background of column next to line numbers
highlight FoldColumn ctermbg=bg
" background of folded lines
highlight Folded ctermbg=bg ctermfg=14
" highlight added lines
highlight DiffAdd ctermbg=None ctermfg=green
" highlight deleted lines
highlight DiffDelete ctermbg=None ctermfg=red
" highlight changed lines
highlight DiffChange ctermbg=None ctermfg=None
" highlight of changed text
highlight DiffText cterm=None ctermbg=yellow ctermfg=brown

"
" Yank/Paste
"
" disable implicit yanking
nnoremap c  "_c
nnoremap d  "_d
nnoremap x  "_x
vnoremap C  "_C
vnoremap D  "_D
vnoremap X  "_X
" ...especially for pasting (also fixing inconsistent position)
vnoremap p  "_c<Esc>p
vnoremap P  "_c<Esc>P
" yank to and paste from system clipboard
set clipboard=unnamedplus
" yank while keeping selection
vnoremap y ygv

"
" keyboard settings
"
" Shift/Strg Enter do funny stuff by default, so map them to Enter
map <esc>[27;2;13~ <Enter>
map <esc>[27;5;13~ <Enter>
map <esc>[27;6;13~ <Enter>
map! <esc>[27;2;13~ <Enter>
map! <esc>[27;5;13~ <Enter>
map! <esc>[27;6;13~ <Enter>
" usable backspace in insert mode
set backspace=indent,eol,start
" autocomplete with ctrl-space
inoremap <Nul> <C-n>
" confirm completion with enter
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" toggle paste mode
set pastetoggle=<F2>
" toggle line numbers
noremap <F4> :set nonumber!<CR>
" smart home key
noremap <expr> <silent> <Home> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
noremap <expr> <silent> <kHome> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
imap <silent> <Home> <C-O><Home>
imap <silent> <kHome> <C-O><kHome>
" move graphical lines up and down
nnoremap k gk
nnoremap j gj
nnoremap <Up> gk
nnoremap <Down> gj
" use original mappings to move up and down logical lines
nnoremap gk k
nnoremap gj j
" better redo combination
nnoremap U <C-R>
" close current buffer without closing split
noremap <Leader>c :bp<bar>sp<bar>bn<bar>bd<CR>
" start interactive aligning on Enter
vmap <Enter> <Plug>(LiveEasyAlign)
" make vim-surround shortcuts consistent
xmap s <Plug>VSurround
" more intuitive splitting
map <C-W>\| :vnew<CR>
map <C-W>_  :new<CR>
" move windows around
map <C-W>x :call WindowSwap#MarkWindowSwap()<CR>
map <C-W>p :call WindowSwap#DoWindowSwap()<CR>
" fix page keys http://vimrc-dissection.blogspot.se/2009/02/fixing-pageup-and-pagedown.html
map <silent> <PageUp> 1000<C-U>
map <silent> <PageDown> 1000<C-D>
imap <silent> <PageUp> <C-O>1000<C-U>
imap <silent> <PageDown> <C-O>1000<C-D>
" fix arrow keys
noremap <S-Up> k
noremap <S-Down> j
inoremap <S-Up> <C-O>k
inoremap <S-Down> <C-O>j
noremap <C-Left> b
noremap <C-Right> e
inoremap <C-Right> <Esc>ea
" move lines with alt up/down
inoremap <A-DOWN> <C-O>:m .+1<CR>
inoremap j <C-O>:m .+1<CR>
inoremap k <C-O>:m .-2<CR>
inoremap <A-UP> <C-O>:m .-2<CR>
nnoremap <A-DOWN> :m .+1<CR>
nnoremap j :m .+1<CR>
nnoremap k :m .-2<CR>
nnoremap <A-UP> :m .-2<CR>
vnoremap <A-DOWN> :m '>+1<CR>gv
vnoremap j :m '>+1<CR>gv
vnoremap k :m '<-2<CR>gv
vnoremap <A-UP> :m '<-2<CR>gv
" emacs movements
noremap <C-E> $
noremap <C-A> 0
inoremap <C-E> <C-O>$
inoremap <C-A> <C-O>0
" do not select line break when using $ in visual mode
vnoremap $ g_
" text objects
"
" between slashes
" f/F/f/F/ moves the cursor to within slashes no matter where on line
vnoremap a/ :<C-U>silent! normal! f/F/f/F/vf/<CR>
vnoremap i/ :<C-U>silent! normal! f/F/f/F/lvt/<CR>
omap a/ :normal va/<CR>
omap i/ :normal vi/<CR>
" allow search for current selection
vmap * "sy<Esc>:let @/ = @s<CR>n

"
" mouse settings
"
" enabled, but do not go into visual mode
set mouse=nicr
try
    set ttymouse=sgr
catch
    set ttymouse=xterm
endtry
" scroll 5 lines up or down but do not scroll beyond text
noremap <ScrollWheelUp> 5<C-U>
noremap <ScrollWheelDown> 5<C-D>
