set nocompatible

set backup
if exists('*mkdir') && !isdirectory(expand("~/.vim/backup"))
    call mkdir(expand("~/.vim/backup"))
endif
set backupdir=~/.vim/backup//

if exists('*mkdir') && !isdirectory(expand("~/.vim/swap"))
    call mkdir(expand("~/.vim/swap"))
endif
set directory=~/.vim/swap//

" some stuff requires this to be set, so do it as early as possible
set term=xterm-256color

"
" plugin related settings
"

" Vundle stuff
filetype off
if isdirectory(expand("~/.vim/bundle/vundle/"))
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()
    Bundle 'altercation/vim-colors-solarized'
    Bundle 'bling/vim-airline'
    Bundle 'chriskempson/base16-vim'
    Bundle 'craigemery/vim-autotag'
    Bundle 'davidhalter/jedi-vim'
    Bundle 'gmarik/vundle'
    Bundle 'jelera/vim-javascript-syntax'
    Bundle 'junegunn/vim-easy-align'
    Bundle 'kien/ctrlp.vim'
    Bundle 'lokaltog/vim-easymotion'
    Bundle 'mitsuhiko/vim-jinja'
    Bundle 'scrooloose/syntastic'
    Bundle 'terryma/vim-multiple-cursors'
    Bundle 'tpope/vim-fugitive'
    Bundle 'tpope/vim-unimpaired'
    Bundle 'vim-scripts/CmdlineComplete'
    Bundle 'vim-scripts/VimClojure'
    Bundle 'vim-scripts/netrw.vim'
    Bundle 'vim-scripts/taglist.vim'
    Bundle 'wesQ3/vim-windowswap'
endif
filetype plugin indent on

" have tree view enabled be default (:Vexplore)
let g:netrw_liststyle=3
" open document to the right of the browser
let g:netrw_browse_split=4

if isdirectory(expand("~/.vim/bundle/vim-airline/"))
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#tabline#buffer_min_count = 2
    let g:airline#extensions#tabline#show_buffers = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#whitespace#enabled = 0
    let g:airline_powerline_fonts = 1
    let g:airline_section_c = airline#section#create_left(['%{getcwd()}', '%f'])
    let g:airline_theme = 'luna'
endif

let g:autotagTagsFile = '.tags'

let g:ctrlp_extensions = ['changes', 'tag']

let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = 0
let g:jedi#use_tabs_not_buffers = 0

let g:syntastic_aggregate_errors = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_echo_current_error = 1
let g:syntastic_enable_signs = 1
let g:syntastic_error_symbol = '✗'
let g:syntastic_python_checkers = ['pylint', 'pep8']
let g:syntastic_python_pylint_args = '--rcfile=~/.pylintrc'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '✗'
let g:syntastic_warning_symbol = '✗'

"
" open or create a file
"

" autocommands
if !exists("autocommands_loaded")
    let autocommands_loaded = 1
    " automatic skeleton for new code files
    autocmd BufNewFile    *.py           0r ~/.skeletons/skeleton.py | $d
    autocmd BufNewFile    *.sh           0r ~/.skeletons/skeleton.sh | $d
    " set filetype or syntax explicitely when creating or opening file
    autocmd BufRead       bash*.dotfile  set filetype=sh
    autocmd BufRead       .bash*         set filetype=sh
    autocmd BufNewFile    *.jinja        set syntax=jinja
    autocmd BufRead       *.jinja        set syntax=jinja
    autocmd BufNewFile    *.jsm          set filetype=javascript
    autocmd BufRead       *.jsm          set filetype=javascript
    autocmd BufNewFile    *.sls          set syntax=yaml | set iskeyword+=- | set iskeyword+=.
    autocmd BufRead       *.sls          set syntax=yaml | set iskeyword+=- | set iskeyword+=.
    autocmd BufWritePost  *              if &diff | diffupdate | endif
    autocmd FileType      python         setlocal completeopt-=preview
endif

set encoding=utf-8
" change to directory of current document in browser
" makes less sense in diff mode and leads to errors in older vim versions
if !&diff
    set autochdir
endif

"
" ctags
"

" recursively check the current directoy and its parents for .tags file, pick
" the first one found
set tags=./.tags;/

"
" display
"

" always show statusline
set laststatus=2
" show line numbers
set number
" keep 10 lines before or after current line visible when scrolling down or up, respectively
set scrolloff=10
" wrap long lines
set wrap
" don't fold
set nofoldenable
set foldminlines=99999
" show tabs and trailing whitespace
:set list listchars=tab:»-,trail:·
" zsh-like command completion
set wildmenu
set wildmode=longest,full
set wildignore=.git,*.pyc

"
" mouse cursor
" 35: bar 31: block
"

" make sure we are always start in normal mode
autocmd FocusGained * silent execute '!echo -e -n "\x1b[\x31 q"'
autocmd VimEnter    * silent execute '!echo -e -n "\x1b[\x31 q"'
let &t_SI = "\x1b[\x35 q"
let &t_EI = "\x1b[\x31 q"

"
" behaviour
"

" switch back to normal mode more quickly
set ttimeoutlen=0

" indentation
set autoindent
set expandtab
set shiftwidth=4
set softtabstop=4

" splits
set splitbelow
set splitright

"
" random utils
"

" write as sudo
noremap <Leader>W :w !sudo tee % > /dev/null<CR>
" format json file
noremap <Leader>J :% !python -m json.tool<CR>

"
" search
"

" update result as you type
set incsearch
" ignore case...
set ignorecase
" ...if pattern is lowercase, otherwise match using given case
set smartcase
" highlight search results
set hlsearch

"
" colours
"

syntax on

set t_Co=256 "256 colors

if isdirectory(expand("~/.vim/bundle/base16-vim"))
    colorscheme base16-eighties
else
    colorscheme darkblue
endif
set background=dark

" background of line number column if shown
highlight LineNr ctermbg=bg
" normal text colour
highlight Normal ctermfg=grey
" autocompletion box
highlight Pmenu ctermfg=black ctermbg=grey
" currently selected line in autocompletion box
highlight PmenuSel ctermfg=lightGrey ctermbg=darkGrey
" wild menu highlighting
highlight StatusLine ctermfg=lightGrey ctermbg=bg
highlight WildMenu ctermfg=black ctermbg=lightGrey
" highlight matches
highlight clear Search
highlight Search ctermbg=yellow ctermfg=brown
" highlight while typing
highlight clear IncSearch
highlight IncSearch ctermbg=blue ctermfg=white
" background of column where warnings and errors are shown
highlight SignColumn ctermbg=bg
" colours for warnings and errors
highlight SyntasticErrorSign ctermbg=bg ctermfg=red
highlight SyntasticWarningSign ctermbg=bg ctermfg=darkyellow
highlight SyntasticStyleErrorSign ctermbg=bg ctermfg=yellow
highlight SyntasticStyleWarningSign ctermbg=bg ctermfg=yellow
" selected text in visual mode
highlight Visual cterm=reverse ctermbg=0
" matching parentheses
highlight MatchParen cterm=bold ctermfg=yellow
" enable highlighting of current line
set cursorline
" don't actually highlight the line...
highlight clear CursorLine
" ...only the line number
highlight CursorLineNR cterm=bold ctermbg=bg ctermfg=yellow
" colors for listchars
highlight SpecialKey cterm=standout ctermfg=red

" vimdiff
" background of column next to line numbers
highlight FoldColumn ctermbg=bg
" background of folded lines
highlight Folded ctermbg=bg ctermfg=14
" highlight added lines
highlight DiffAdd ctermbg=green ctermfg=black
" highlight deleted lines
highlight DiffDelete ctermfg=red
" highlight changed lines
highlight DiffChange ctermbg=yellow ctermfg=black
" highlight of changed text
highlight DiffText cterm=NONE ctermbg=brown ctermfg=black

"
" keyboard settings
"

" usable backspace in insert mode
set backspace=indent,eol,start
" enable moving to next or previous line with left or right
set whichwrap+=<,>,h,l,[,]
" autocomplete with ctrl-space
inoremap <Nul> <C-n>
" yank selection keeping cursor position
vnoremap y ygv<Esc>
" do not fill register with overwritten text when pasting
xnoremap p "_dP
" copy to system clipboard with Control-C keeping cursor position
vnoremap <C-C> :!xclip -f -selection clip<CR>ugv<Esc>
" toggle paste mode
set pastetoggle=<F2>
" toggle line numbers
noremap <F4> :set nonumber!<CR>
" smart home key
noremap <expr> <silent> <Home> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
noremap <expr> <silent> <kHome> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
imap <silent> <Home> <C-O><Home>
imap <silent> <kHome> <C-O><kHome>
" move graphical lines up and down
nnoremap k gk
nnoremap j gj
nnoremap <Up> gk
nnoremap <Down> gj
" use original mappings to move up and down logical lines
nnoremap gk k
nnoremap gj j
" better redo combination
nnoremap U <C-R>
" open definition of word under cursor in vertical split
map <F3> :rightbelow vsp <CR>:exec("tag ".expand("<cword>"))<CR>
" close current buffer without closing split
noremap <Leader>c :bp<bar>sp<bar>bn<bar>bd<CR>

"
" mouse settings
"

" enabled in normal and visual mode only
set mouse=nv
" fix problem with selecting a split not working
try
    set ttymouse=sgr
catch
    set ttymouse=xterm
endtry
" scroll 5 lines up or down
map <ScrollWheelUp> 5<C-Y>
map <ScrollWheelDown> 5<C-E>

